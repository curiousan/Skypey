{"version":3,"sources":["static- data.js","actions/constants/action-types.js","reducers/user.js","reducers/index.js","reducers/contacts.js","reducers/activeUserId.js","reducers/message.js","reducers/typing.js","store/index.js","containers/User.js","actions/index.js","components/SideBar.js","components/Empty.js","components/Header.js","containers/Chat.js","containers/MessageInput.js","components/ChatWindow.js","components/Main.js","containers/App.js","serviceWorker.js","index.js"],"names":["numberOfUsers","SET_ACTIVE_USER_ID","shortid","require","txtgen","faker","_","users","Array","from","length","generateUser","contacts","mapKeys","getMessages","messagesPerUser","messages","forEach","user","numberOfMsgs","user_id","Object","objectSpread","v","i","number","text","sentence","is_user_msg","random","boolean","name","findName","email","internet","profile_pic","avatar","status","generate","combineReducers","state","arguments","undefined","activeUserId","action","type","payload","message","_action$payload","userId","allUserMsgs","keys","pop","defineProperty","typing","store","createStore","reducer","User","_ref","key","react_default","a","createElement","className","onClick","_ref2","dispatch","bind","src","alt","SideBar","console","log","element","values","map","contact","src_containers_User","empty","first_name","split","Header","Chat","concat","Chats","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","scrollToBottom","chatsRef","current","scrollTop","scrollHeight","React","createRef","ref","Chat_Chat","Component","MessageInput","value","getState","onSubmit","e","preventDefault","onChange","target","placeholder","ChatWindow","activeMsg","activeUser","components_Header","src_containers_Chat","src_containers_MessageInput","components_Main","src_components_ChatWindow","components_Empty","App","_store$getState","src_components_SideBar","Boolean","window","location","hostname","match","render","ReactDOM","src_containers_App","document","getElementById","subscribe","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d87156e5.chunk.js","sourcesContent":["const shortid = require(\"shortid\"); // shortid.generate() returns a unique \"short\" id\nconst txtgen = require(\"txtgen\"); // txtgen.sentence() returns random \"readable\" sentences\nconst faker = require(\"faker\"); // faker is used for generating random fake data.\nconst _ = require(\"lodash\"); // lodash is a utility lib for Javascript\n\nconst users = generateUsers(10);\nexport const contacts = _.mapKeys(users, \"user_id\");\nexport const getMessages = messagesPerUser => {\n  let messages = {};\n  _.forEach(users, user => {\n    messages[user.user_id] = {\n      ..._.mapKeys(generateMsgs(messagesPerUser), \"number\")\n    };\n  });\n  return messages;\n};\n\n// just an example of how the state object is structured\nexport const state = {\n  user: generateUser(),\n  messages: getMessages(10),\n  typing: \"\",\n  contacts,\n  activeUserId: null\n};\n\n/**\n * @returns {Object} - a new user object\n */\nexport function generateUser() {\n  return {\n    name: faker.name.findName(),\n    email: faker.internet.email(),\n    profile_pic: faker.internet.avatar(),\n    status: txtgen.sentence(),\n    user_id: shortid.generate()\n  };\n}\n/**\n * @returns {Object} - a new message object\n */\nfunction generateMsg(number) {\n  return {\n    number,\n    text: txtgen.sentence(),\n    is_user_msg: faker.random.boolean()\n  };\n}\n/**\n *\n * @param {Number} numberOfUsers - the number of users to be generated\n * @param {Function} generateUser - function that generates a single user\n * @returns {Array} - an array of user objects with length n = numberOfUsers\n */\nfunction generateUsers(numberOfUsers) {\n  return Array.from({ length: numberOfUsers }, () => generateUser());\n}\n\nfunction generateMsgs(numberOfMsgs) {\n  return Array.from({ length: numberOfMsgs }, (v, i) => generateMsg(i));\n}","export const SET_ACTIVE_USER_ID = 'SET_ACTIVE_USER_ID';\nexport const SET_TYPING_VALUE = 'SET_TYPING_VALUE';\nexport const SEND_MESSAGE = 'SEND_MESSAGE';","import { generateUser } from '../static- data';\nexport default (state = generateUser(), action) => {\n  return state;\n}","import user from './user';\nimport contacts from './contacts';\nimport message from './message';\nimport typing from'./typing'\nimport { combineReducers } from 'redux';\nimport activeUserId from \"./activeUserId\";\nexport default combineReducers({\n    user,\n    contacts,\n    activeUserId,\n    message,\n    typing\n\n})","import {contacts} from \"../static- data\";\n\nexport default (state = {contacts}, action) =>{\n  return state;\n}","import {SET_ACTIVE_USER_ID} from \"../actions/constants/action-types\";\n\nexport default function activeUserId(state = null, action) {\n  switch (action.type) {\n      case SET_ACTIVE_USER_ID:\n        return action.payload\n      default:\n        return state;\n      \n  }\n  return state;\n}","import {getMessages} from '../static- data';\nimport { SEND_MESSAGE } from '../actions/constants/action-types';\nimport _ from 'lodash';\n\nexport default (state = getMessages(10), action) =>{\n    switch (action.type) {\n        case SEND_MESSAGE:\n            const { message, userId } = action.payload;\n            const allUserMsgs = state[userId];\n            const number = +_.keys(allUserMsgs).pop() + 1;\n\n            return {\n                ...state,\n                [userId]: {\n                    ...allUserMsgs,\n                    [number]: {\n                        number,\n                        text: message,\n                        is_user_msg: true\n                    }\n                }\n            };\n        default:\n            return state;\n\n    }\n    return state;\n}","import {SEND_MESSAGE, SET_TYPING_VALUE} from \"../actions/constants/action-types\";\nexport default (state= '', action )=>{\n    switch (action.type) {\n        case SET_TYPING_VALUE:\n            return action.payload;\n        case SEND_MESSAGE:\n            return '';\n        default:\n            return state;\n    }\n\n}","import { createStore } from 'redux';\nimport reducer from '../reducers/'\nconst store = createStore(reducer);\nexport default store;","import React from 'react';\nimport './User.css';\nimport {setActiveUserId} from \"../actions\";\nimport store from '../store'\n\nconst User = ({ user }) =>{\n  const {name, profile_pic, status,key } = user;\n  const handleUserClick =({user_id}) =>{\n      store.dispatch(setActiveUserId(user_id))\n    }\n\n  return (\n    <div className=\"user\" onClick={handleUserClick.bind(null, user)}>\n      <img src={profile_pic} alt={name} className=\"user__pic\" />\n      <div className=\"user__details\">\n        <p className=\"user__details-name\">{name}</p>\n        <p className=\"user__details-status\">{status}</p>\n      </div>\n    </div>\n\n  );\n}\n\nexport default User;","import {SET_ACTIVE_USER_ID, SET_TYPING_VALUE, SEND_MESSAGE } from \"./constants/action-types\";\nexport const setActiveUserId = id =>({\n   type: SET_ACTIVE_USER_ID,\n   payload: id\n});\nexport const setTypingValue = value => ({\n    type: SET_TYPING_VALUE,\n    payload: value\n});\n\nexport const sendMessage = (message, userId) => ({\n    type:SEND_MESSAGE,\n    payload: {\n        message,\n        userId\n    }\n})","import React from 'react';\nimport './SideBar.css';\nimport User from '../containers/User';\nimport _ from 'lodash';\n\nconst SideBar = ({contacts})=>{\n  console.log(contacts);\n  const element = _.values(contacts[0]).map((contact,i) =>{\n      return <User user={contact} key={contact.user_id+i} ></User>;\n  })\n\n  return <aside className=\"side-bar\">\n            {element}\n         </aside>;\n\n};\n\nexport default SideBar;","import React from \"react\";\nimport \"./Empty.css\";\nconst empty = ({ user }) => {\n  const { name, profile_pic, status } = user;\n  const first_name = name.split(\" \")[0];\n  return (\n    <div className=\"empty\">\n    <h1 className=\"empty__name\">Welcome, {first_name} </h1>\n<img src={profile_pic} alt={name} className=\"empty__img\" />\n    <p className=\"empty__status\">\n    <b>Status:</b> {status}\n</p>\n<button className=\"empty__btn\">Start a conversation</button>\n  <p className=\"empty__info\">\n    Search for someone to start chatting with or go to Contacts\n    to see who\n    is available\n  </p>\n  </div> );\n};\nexport default empty;","import React from \"react\";\nimport \"./Header.css\";\nfunction Header({ user }) {\n  const { name, status } = user;\n  return (\n    <header className=\"Header\">\n      <h1 className=\"Header__name\">{name}</h1>\n      <p className=\"Header__status\">{status}</p>\n    </header>\n  );\n}\nexport default Header;","import React, { Component } from \"react\";\nimport \"./Chat.css\";\nconst Chat = ({ message }) => {\n  const { text, is_user_msg } = message;\n\n  return (\n    <span className={`Chat ${is_user_msg ? \"is-user-msg\" : \"\"}`}>{text}</span>\n  );\n};\nclass Chats extends Component {\n  constructor(props) {\n    super(props);\n    this.chatsRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.scrollToBottom();\n  }\n  componentDidUpdate() {\n    this.scrollToBottom();\n  }\n\n  scrollToBottom = () => {\n    this.chatsRef.current.scrollTop = this.chatsRef.current.scrollHeight;\n  };\n\n  render() {\n    return (\n      <div className=\"Chats\" ref={this.chatsRef}>\n        {this.props.messages.map(message => (\n          <Chat message={message} key={message.number} />\n        ))}{\" \"}\n      </div>\n    );\n  }\n}\nexport default Chats;\n","import React from \"react\";\nimport store from \"../store\";\nimport { setTypingValue, sendMessage } from \"../actions\";\nimport \"./MessageInput.css\";\n\nconst MessageInput = ({ value }) => {\n    const state = store.getState();\n    const handleSumbit = e => {\n        e.preventDefault();\n        const { typing , activeUserId } = state;\n        store.dispatch(sendMessage(typing, activeUserId));\n    }\n  const handleChange = e => {\n    store.dispatch(setTypingValue(e.target.value));\n  };\n  return (\n    <form className=\"Message\" onSubmit={handleSumbit}>\n      <input\n        className=\"Message__input\"\n        onChange={handleChange}\n        value={value}\n        placeholder=\"write a message\"\n      />{\" \"}\n    </form>\n  );\n};\nexport default MessageInput;\n","import React from 'react';\nimport store from '../store';\nimport Header from '../components/Header';\nimport Chat from '../containers/Chat';\nimport './ChatWindow.css';\nimport _ from 'lodash';\nimport MessageInput from \"../containers/MessageInput\";\n\nconst ChatWindow = ({ activeUserId }) => {\n    const state = store.getState();\n    const { typing } = state;\n    const activeMsg = state.message[activeUserId];\n    console.log(state);\n    const activeUser = state.contacts.contacts[activeUserId];\n    console.log(activeUser);\n    return (\n        <div className=\"chat-window\">\n            <Header user={activeUser}/>\n            <Chat messages={_.values(activeMsg)}/>\n            <MessageInput value={typing} />\n\n        </div>\n    ); };\nexport default ChatWindow;","import React from 'react';\nimport './Main.css';\nimport Empty from \"../components/Empty\";\nimport ChatWindow from \"../components/ChatWindow\";\n\nexport  default ({user, activeUserId})=>{\n\n  const renderMainContent = () => {\n    if (!activeUserId) {\n      return <Empty user={user} activeUserId={activeUserId} />;\n    } else {\n      return <ChatWindow activeUserId={activeUserId} />;\n    }\n  }\n  return <main className=\"main\">{renderMainContent()}</main>;\n}\n\n","import React  from 'react';\nimport './App.css';\nimport SideBar from '../components/SideBar';\nimport Main from '../components/Main';\nimport store from '../store';\nimport _ from 'lodash';\n\nconst App = ()=> {\n  const { contacts, user, activeUserId  } = store.getState();\n  return (<div className =\"App\">\n    <SideBar contacts = { _.values(contacts) }/>\n    <Main user={user} activeUserId={activeUserId}/>\n  </div>);\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\n\nconst fancyLog= ()=>  {\n  console.log('%c Rendered with 👉 color: #FFF');\n  console.log(store.getState());\n}\nconst render = () => {\n  ReactDOM.render(<App />, document.getElementById('root'));\n  fancyLog()\n}\nrender();\nstore.subscribe(render);\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}